package cn.henio;import io.netty.handler.codec.mqtt.MqttQoS;import io.vertx.core.Vertx;import io.vertx.core.json.JsonObject;import io.vertx.core.net.NetClientOptions;import io.vertx.core.net.NetSocket;import io.vertx.ext.unit.Async;import io.vertx.ext.unit.TestContext;import io.vertx.ext.unit.junit.VertxUnitRunner;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Date;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;import org.eclipse.paho.client.mqttv3.IMqttToken;import org.eclipse.paho.client.mqttv3.MqttCallback;import org.eclipse.paho.client.mqttv3.MqttClient;import org.eclipse.paho.client.mqttv3.MqttConnectOptions;import org.eclipse.paho.client.mqttv3.MqttException;import org.eclipse.paho.client.mqttv3.MqttMessage;import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;/** * created by mouzhanpeng at 2018/2/6 13:31 * * @since jdk 1.9.0 */@RunWith(VertxUnitRunner.class)public class NetVerticleTest {    private Vertx vertx;    @Before    public void setUp(TestContext context) {        vertx = Vertx.vertx();    }    @After    public void tearDown(TestContext context) {        vertx.close();    }    @Test    public void testApplication(TestContext context) throws MqttException {        final Async async = context.async();        vertx.createNetClient(new NetClientOptions().setIdleTimeout(5000).setSsl(true).setTrustAll(true)).connect(14321, "localhost", res -> {            if (res.succeeded()) {                System.out.println("[client]Connected!");                NetSocket socket = res.result();                socket.handler(buffer -> {                    System.out.println("[client]I received some bytes: " + buffer.length());                    System.out.println(buffer.toString());                });                JsonObject outer = new JsonObject();                JsonObject header = new JsonObject();                header.put("id", "mzp");                outer.put("header", header);                outer.put("payload", "hello world!");                socket.end(outer.toBuffer());                System.err.println("client send ok!");                vertx.createSharedWorkerExecutor("first-2").executeBlocking(future -> {                    for(;;){                        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));                        try {                            String str = br.readLine();                            if(null != str && 0!= str.trim().length()){                                socket.write("[" + new Date() + "]--hi!");                                socket.end();                                System.err.println("server send ok!");                            }                        } catch (IOException e) {                            e.printStackTrace();                        }                    }                }, null);            } else {                System.out.println("Failed to connect: " + res.cause().getMessage());            }        });        //context.assertTrue(true);        //async.complete();    }    public static void main(String[] args) {        Vertx vertx = Vertx.vertx();        ExecutorService executorService = Executors.newSingleThreadExecutor();        vertx.createNetClient(new NetClientOptions().setTcpKeepAlive(true).setMetricsName("jlog").setLogActivity(true).setSsl(true).setTrustAll(true)).connect(14321, "127.0.0.1", res -> {            if (res.succeeded()) {                System.out.println("[client]Connected!");                NetSocket socket = res.result();                socket.handler(buffer -> {                    System.out.println("[client]I received some bytes: " + buffer.length());                    System.out.println(buffer.toString());                }).closeHandler(v -> {                    System.err.println("client closed");                }).exceptionHandler(e -> {                    e.printStackTrace();                });                JsonObject outer = new JsonObject();                outer.put("identifier", "mzp-1");                outer.put("payload", "hello world!");                System.out.println(outer.toString());                socket.write(outer.toBuffer());                executorService.execute(() -> {                    for(;;){                        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));                        try {                            String str = br.readLine();                            if(null != str && 0!= str.trim().length()){                                socket.write(str);                                if (socket.writeQueueFull()) {                                    socket.pause();                                    socket.drainHandler(done -> {                                        socket.resume();                                    });                                }                            }                        } catch (IOException e) {                            e.printStackTrace();                        }                        try {                            Thread.sleep(10);                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                    }                });            } else {                System.out.println("Failed to connect: " + res.cause().getMessage());            }        });    }}